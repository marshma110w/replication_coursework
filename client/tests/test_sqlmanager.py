# test_sqlmanager.py
import time
import random
from sql_manager import PostgreSQLManager


def test_read(manager):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ —á—Ç–µ–Ω–∏—è"""
    print("\n[+] –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á—Ç–µ–Ω–∏—è...")
    query = "SELECT * FROM items"
    iterations = 1000
    start_time = time.time()

    for i in range(iterations):
        manager.execute_query(query, use_replica=True, fetch=True)
        if i % 100 == 0:
            print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ {i} SELECT-–∑–∞–ø—Ä–æ—Å–æ–≤...")

    elapsed = time.time() - start_time
    qps = iterations / elapsed
    print(f"\n[‚úì] –í—ã–ø–æ–ª–Ω–µ–Ω–æ {iterations} SELECT-–∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {elapsed:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"[‚úì] QPS (–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É): {qps:.2f}")
    print(f"[‚úì] RPS (–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É): {qps * 60:.0f}")


def test_write(manager):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏"""
    print("\n[+] –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏...")
    warehouse_id = 1
    category_id = 1
    base_name = "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä"

    insert_query = """
    INSERT INTO items (name, description, barcode, category_id, weight, warehouse_id, quantity)
    VALUES (%s, %s, %s, %s, %s, %s, %s) RETURNING id
    """

    update_query = """
    UPDATE items SET name = %s WHERE id = %s
    """

    delete_query = """
    DELETE FROM items WHERE id = %s
    """

    iterations = 500
    ids = []

    start_time = time.time()
    print("[~] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ INSERT...")

    for i in range(iterations):
        name = f"{base_name}_{i}"
        desc = f"–û–ø–∏—Å–∞–Ω–∏–µ {i}"
        barcode = f"{random.randint(1000000000, 9999999999)}"
        category = random.choice([1, 2])
        weight = round(random.uniform(0.1, 10.0), 2)
        warehouse = random.choice([1, 2])

        result = manager.execute_query(insert_query, params=(
            name, desc, barcode, category, weight, warehouse, 10
        ))

        # rowcount ‚Äî —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        if result == 1:
            # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É –∏–ª–∏ –∏–º–µ–Ω–∏
            check_query = "SELECT id FROM items WHERE name = %s"
            fetched = manager.execute_query(check_query, params=(name,), fetch=True)
            if fetched:
                item_id = fetched[0]['id']
                ids.append(item_id)
            else:
                print(f"[!] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –¥–ª—è {name}")
        else:
            print("[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ")

    print(f"[~] –í—ã–ø–æ–ª–Ω–µ–Ω–æ {len(ids)} –≤—Å—Ç–∞–≤–æ–∫, –Ω–∞—á–∏–Ω–∞–µ–º UPDATE...")

    for i, item_id in enumerate(ids):
        new_name = f"–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä {i}"
        manager.execute_query(update_query, params=(new_name, item_id))

        if i % 100 == 0:
            print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ {i} UPDATE-–∑–∞–ø—Ä–æ—Å–æ–≤...")

    print(f"[~] –í—ã–ø–æ–ª–Ω–µ–Ω—ã UPDATE-–∑–∞–ø—Ä–æ—Å—ã, –Ω–∞—á–∏–Ω–∞–µ–º DELETE...")

    for i, item_id in enumerate(ids):
        manager.execute_query(delete_query, params=(item_id,))
        if i % 100 == 0:
            print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ {i} DELETE-–∑–∞–ø—Ä–æ—Å–æ–≤...")

    elapsed = time.time() - start_time
    tps = len(ids) / elapsed
    print(f"\n[‚úì] –í—ã–ø–æ–ª–Ω–µ–Ω–æ {len(ids)} –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏ (INSERT + UPDATE + DELETE) –∑–∞ {elapsed:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"[‚úì] TPS (–æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥—É): {tps:.2f}")
    print(f"[‚úì] TPM (–æ–ø–µ—Ä–∞—Ü–∏–π –≤ –º–∏–Ω—É—Ç—É): {tps * 60:.0f}")


if __name__ == "__main__":
    manager = PostgreSQLManager()

    print("üü¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    master_status, master_ping = manager.check_connection(use_replica=False)
    replica_status, replica_ping = manager.check_connection(use_replica=True)

    print(f"–ú–∞—Å—Ç–µ—Ä: {'–î–æ—Å—Ç—É–ø–µ–Ω' if master_status else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'} ({master_ping or 0} –º—Å)")
    print(f"–†–µ–ø–ª–∏–∫–∞: {'–î–æ—Å—Ç—É–ø–Ω–∞' if replica_status else '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'} ({replica_ping or 0} –º—Å)\n")

    test_read(manager)
    test_write(manager)
